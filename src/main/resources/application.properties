spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=${MYSQL_DATABASE: jdbc:mysql://localhost:3306/projeto_proposta}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:}
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true
spring.jpa.hibernate.format_sql=true

#Url da validacao da proposta
analise_documento.url=${ANALISE_DOCUMENTO_URL:http://localhost:9999}

#Url da api que gera os cartões para propostas elegiveis
url.accounts.api=${URL.ACCOUNTS.API:http://localhost:8888}

#Delay do sheduled
delay.scheduled=${DELAY_SCHEDULED:20000}

#Actuator
info.app.name=@project.name@
info.app.version=@project.version@
info.app.groupId=@project.groupId@
info.app.artifactId=@project.artifactId@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@ 

management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*

## spring security resource server configuration
## nos ajuda a informar onde o Spring Security pode encontrar nosso authorization server. Essa informação é muito importante!
## Endereco do maravilindo keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/demo}

##indicamos onde o Spring Security pode encontrar as chaves para conseguir validar a assinatura do token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/demo/protocol/openid-connect/certs}

# Descomentar essa variavel caso queira executar a api no compose
#O acesso ao painel admin via navegador é perdido quando ela esta ativa
# KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth

